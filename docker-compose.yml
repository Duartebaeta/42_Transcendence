services:
  # gamebackend:
  #   build:
  #     dockerfile: gamebackend/docker/Dockerfile
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - app-network
  #   env_file:
  #     - gamebackend/srcs/.env
  #   command: daphne -b 0.0.0.0 -p 9090 gameapi.asgi:application

  users:
    container_name: users
    build: #./users/docker
      dockerfile: users/docker/Dockerfile
    volumes:
      - ./users/srcs/db.sqlite3:/app/db.sqlite3
    expose:
      - "8000"
    networks:
      - app-network
    env_file:
      - users/srcs/.env
    restart: on-failure
    # command: python manage.py runserver 0.0.0.0:8000

  user-game-stats:
    container_name: user-stats
    build: #./user-game-stats/docker
      dockerfile: user-game-stats/docker/Dockerfile
    volumes:
      - ./user-game-stats/srcs/db.sqlite3:/app/db.sqlite3
    expose:
      - "8080"
    networks:
      - app-network
    env_file:
      - user-game-stats/srcs/.env
    restart: on-failure
    # command: python manage.py runserver 0.0.0.0:8080

  livechat:
    container_name: livechat
    build: #./livechat/docker
      dockerfile: livechat/docker/Dockerfile
    volumes:
      - ./livechat/srcs/db.sqlite3:/app/db.sqlite3
    expose:
      - "9000"
    networks:
      - app-network
    env_file:
      - livechat/srcs/.env
    restart: on-failure
    # command: python manage.py runserver 0.0.0.0:9000

  nginx:
    build:
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
      
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/frontend:/usr/share/nginx/html
    depends_on:
      - users
      - user-game-stats
      - livechat
      # - gamebackend
    networks:
      - app-network
    restart: on-failure

networks:
  app-network:
    driver: bridge
